
export function PopupCreate(type, data) {

    const overlayDiv = document.createElement("div");
    const popupWrapper = document.createElement("div");

    overlayDiv.classList.add("popup-overlay");
    popupWrapper.classList.add("popup-container");

    overlayDiv.appendChild(popupWrapper);

    document.body.appendChild(overlayDiv);

    overlayDiv.addEventListener("mousedown", (e) => {
        if(e.target === overlayDiv)
                overlayDiv.remove()
    })

    if(type === "new")
        PopulatePopupNew(data)

    if(type === "history")
        PopulatePopupHistory(data)

}
export function PopulatePopupNew(incoming) {

    const grabPopup = document.querySelector(".popup-container");

    const name = document.createElement("input");
    const phone = document.createElement("input");
    const email = document.createElement("input");
    const priceoffer = document.createElement("input");
    const priceresponse = document.createElement("input");
    const button = document.createElement("button");
    const data = document.createElement("textarea");

    name.classList.add("data-cname");
    phone.classList.add("data-phone");
    email.classList.add("data-email");
    priceoffer.classList.add("data-priceoffer");
    priceresponse.classList.add("data-priceresponse");
    button.classList.add("data-buttonsubmit");
    data.classList.add("data-vehicledata");

    name.disabled = true;
    phone.disabled = true;
    email.disabled = true;
    priceoffer.disabled = true;
    button.disabled = false;
    data.disabled = true;

    // Set incoming data
    name.value = incoming.name;
    phone.value = incoming.phone;
    email.value = incoming.email;

    priceoffer.value = `${incoming.generatedOffer} - Auto Generated`;
    priceresponse.value = `${incoming.responseOffer}`;
    button.innerText = "Respond";

    data.value = `
    Make: ${incoming.make}
    Model: ${incoming.model}
    Year: ${incoming.year}
    Color: ${incoming.color}
    Mileage: ${incoming.mileage}
    Condition: ${incoming.condition}
    VIN: ${incoming.vin}
    Last Inspection: ${incoming.lastInspection}
    Next Inspection: ${incoming.nextInspection}
    Packages/Extras: ${incoming.packages}
    Towbar: ${incoming.towbar}
    Tax Back (if deregistered): ${incoming.taxBack}
    Financed: ${incoming.financed}
    Number of Owners: ${incoming.owners}
    Full Service History: ${incoming.serviceHistory}
    Date: ${incoming.offerCreated}
    `.trim().split("\n").map(line => line.trim()).join("\n");

    grabPopup.appendChild(name);
    grabPopup.appendChild(phone);
    grabPopup.appendChild(email);
    grabPopup.appendChild(priceoffer);
    grabPopup.appendChild(priceresponse);
    grabPopup.appendChild(data);
    grabPopup.appendChild(button);


    button.addEventListener("mousedown", (e) => {

        console.log("success")
        const data = {
            id: incoming.id.toString(),
            status: "pursued",
            responseOffer: priceresponse.value.toString()
        };
        
        BasicPutOffer(data)
        .then(responseData => {
            console.log("successfully submitted offer");
            PopulateSuccessMessage("new")

        })
        .catch(error => {
            console.error("Error submitting offer:", error);
        });
        
    })

    setTimeout(() => {
        priceresponse.focus()
    }, 1000);

}
export function PopulatePopupHistory(incoming) {

    const grabPopup = document.querySelector(".popup-container");

    const name = document.createElement("input");
    const phone = document.createElement("input");
    const email = document.createElement("input");
    const priceoffer = document.createElement("input");
    const priceresponse = document.createElement("input");
    const data = document.createElement("textarea");
    const button = document.createElement("button");

    name.classList.add("data-cname");
    phone.classList.add("data-phone");
    email.classList.add("data-email");
    priceoffer.classList.add("data-priceoffer");
    priceresponse.classList.add("data-priceresponse");
    data.classList.add("data-vehicledata");
    button.classList.add("data-buttonsubmit");

    name.disabled = true;
    phone.disabled = true;
    email.disabled = true;
    priceoffer.disabled = true;
    priceresponse.disabled = true;
    data.disabled = true;

    name.value = incoming.name || "Default Name";
    phone.value = incoming.phone || "(555) 123-4567";
    email.value = incoming.email || "default@email.com";
    priceoffer.value = `${incoming.generatedOffer || "0,00"} Autogenerated response`;
    priceresponse.value = `${incoming.responseOffer || "0,00"}`; 

    data.value = `
    Make: ${incoming.make || "Unknown"}
    Model: ${incoming.model || "Unknown"}
    Year: ${incoming.year || "Unknown"}
    Color: ${incoming.color || "Unknown"}
    Mileage: ${incoming.mileage || "Unknown"}
    Condition: ${incoming.condition || "Unknown"}
    VIN: ${incoming.vin || "Unknown"}
    Last Inspection: ${incoming.lastInspection || "Unknown"}
    Next Inspection: ${incoming.nextInspection || "Unknown"}
    Packages/Extras: ${incoming.packages || "None"}
    Towbar: ${incoming.towbar || "No"}
    Tax Back (if deregistered): ${incoming.taxBack || "No"}
    Financed: ${incoming.financed || "No"}
    Number of Owners: ${incoming.owners || "Unknown"}
    Full Service History: ${incoming.serviceHistory || "Unknown"}
    Date: ${incoming.offerCreated || "Unknown"}
    `.trim().split("\n").map(line => line.trim()).join("\n"); 

    // Set the button text
    button.innerText = "Restore"; 

    // Append elements to the popup container
    grabPopup.appendChild(name);
    grabPopup.appendChild(phone);
    grabPopup.appendChild(email);
    grabPopup.appendChild(priceoffer);
    grabPopup.appendChild(priceresponse);
    grabPopup.appendChild(data);
    grabPopup.appendChild(button);

    button.addEventListener("mousedown", (e) => {
        const data = {
            id: incoming.id.toString(),
            status: "pursued",
            responseOffer: priceresponse.value.toString()
        };

        BasicPutOffer(data)
        .then(responseData => {
            console.log("successfully submitted offer");
            PopulateSuccessMessage("history")

        })
        .catch(error => {
            console.error("Error submitting offer:", error);
        });

    })
}



// Helper function

function BasicPutOffer(data) {
    return fetch(window.location.origin + "/dealership/put-offer", {
        method: 'PUT',           
        headers: {
            'Content-Type': 'application/json'  
        },
        body: JSON.stringify(data) 
    })
    .then(response => {
        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }
    })
    .then(data => {
        console.log('Success:', data);
        return data; 
    }) 
    .catch((error) => {
        console.error('Error:', error);
        throw error;
    });
}

export function PopulateSuccessMessage(type){
    const grabPopup = document.querySelector(".popup-container");
    grabPopup.innerHTML = ""

    grabPopup.classList.add("popup-success")

    const element = document.createElement("div")
    element.classList.add("popup-success-icon")
    element.innerHTML = `<i class="fa-solid fa-circle-check"></i>`

    grabPopup.appendChild(element)

    setTimeout(() => {
        DispatchPopupClose(type)
    }, 1200);
}

export function DispatchPopupClose(type){
    const element = document.querySelector(".popup-overlay");

    element.style.transition = "opacity 0.5s ease";
    element.style.opacity = "0";

    setTimeout(() => {

        const mouseDownEvent = new MouseEvent("mousedown", {
        bubbles: true,
        cancelable: true,
        clientX: 100,
        clientY: 100
        });

        element.dispatchEvent(mouseDownEvent);

        if(type === "new"){
            setTimeout(() => {
                const dealerButtons = document.querySelectorAll(".dealer-idx-btn")
                dealerButtons[0].dispatchEvent(mouseDownEvent)
                window.scrollTo({ top: 0, behavior: 'smooth' });

            }, 100);
        }

        if(type === "history"){
            setTimeout(() => {
                const dealerButtons = document.querySelectorAll(".dealer-idx-btn")
                dealerButtons[1].dispatchEvent(mouseDownEvent)
                window.scrollTo({ top: 0, behavior: 'smooth' });

            }, 100);
        }

    }, 500);


}
